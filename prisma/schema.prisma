generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id
  avatarId      String?        @unique
  active        Boolean        @default(true)
  createAt      DateTime       @default(now())
  username      String         @unique
  email         String         @unique
  name          String
  lastname      String
  hash          String
  avatar        Image?         @relation(fields: [avatarId], references: [id])
  traveler      Traveler?
  administrator Administrator?
}

model Traveler {
  id       String    @id
  userId   String    @unique
  active   Boolean   @default(true)
  createAt DateTime  @default(now())
  user     User      @relation(fields: [userId], references: [id])
  comment  Comment[]
}

model Administrator {
  id       String   @id
  userId   String   @unique
  active   Boolean  @default(true)
  createAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
}

model Image {
  id         String    @id
  tourId     String?
  locationId String?
  active     Boolean   @default(true)
  createAt   DateTime  @default(now())
  alt        String
  url        String
  user       User?
  tour       Tour?     @relation(fields: [tourId], references: [id])
  location   Location? @relation(fields: [locationId], references: [id])
}

model Tour {
  id          String             @id
  active      Boolean            @default(true)
  createAt    DateTime           @default(now())
  slug        String             @unique
  title       String
  description Bytes
  price       Decimal
  duration    Int
  rating      Decimal
  comments    Comment[]
  images      Image[]
  locations   LocationsOnTours[]
  services    ServicesOnTours[]
}

model Location {
  id          String             @id
  active      Boolean            @default(true)
  createAt    DateTime           @default(now())
  name        String
  description Bytes
  images      Image[]
  tours       LocationsOnTours[]
}

model Service {
  id       String            @id
  active   Boolean           @default(true)
  createAt DateTime          @default(now())
  content  String
  tours    ServicesOnTours[]
}

model LocationsOnTours {
  active     Boolean  @default(true)
  createAt   DateTime @default(now())
  location   Location @relation(fields: [locationId], references: [id])
  tour       Tour     @relation(fields: [tourId], references: [id])
  locationId String
  tourId     String

  @@id([locationId, tourId])
}

model ServicesOnTours {
  active    Boolean  @default(true)
  createAt  DateTime @default(now())
  tour      Tour     @relation(fields: [tourId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])
  tourId    String
  serviceId String

  @@id([serviceId, tourId])
}

model Comment {
  id         String   @id
  tourId     String
  parentId   String
  travelerId String
  active     Boolean  @default(true)
  createAt   DateTime @default(now())
  content    Bytes
  traveler   Traveler @relation(fields: [travelerId], references: [id])
  tour       Tour     @relation(fields: [tourId], references: [id])
}
